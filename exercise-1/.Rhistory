source('~/Desktop/INFO201/ch9-data-frames/exercise-2/exercise.R', echo=TRUE)
employees
random_salaries
hist(random_salaries)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
random_salaries_2017 <- runif(100, min = 40000, max = 50000)
random_salaries_2017
hist(random_salaries_2017)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
random_salaries_2018 <- runif(100, min = -5000, max = 10000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
random_salaries_2018 <- random_salaries_2017 + runif(100, min = -5000, max = 10000)
random_salaries_2018
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- random_salaries_2018 - random_salaries_2017
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(random_salaries_2017, random_salaries_2018, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- random_salaries_2018 - random_salaries_2017
df(salaries)
data.frame(salaries)
print(salaries)
plot(salaries)
View(salaries)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
read.csv(USPersonalExpenditure)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
read.csv("USPersonalExpenditure")
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
read.csv('USPersonalExpenditure')
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame('USPersonalExpenditure')
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
upe <- data.frame('USPersonalExpenditue')
upe
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
upe <- data.frame('USPersonalExpenditure')
upe
View(upe)
is.data.frame(upe)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
upe <- data.frame(USPersonalExpenditure)
View(upe)
# What are the column names of your dataframe?
row.names(upe)
# What are the column names of your dataframe?
col.names(upe)
# What are the column names of your dataframe?
colnames(upe)
# What are the row names of your dataframe?
row.names(upe)
# Add a column "category" to your data frame that contains the rownames
upe$category
# Add a column "category" to your data frame that contains the rownames
upe$category <- row.names(upe)
View(upe)
# How much money was spent on personal care in 1940?
personal_care_1940 <- upe['personal care', 'X1940']
personal_care_1940
# How much money was spent on personal care in 1940?
personal_care_1940 <- upe["Personal Care", "X1940"]
personal_care_1940
upe$Personal Care
# Create a vector `first_names` with 5 names in it
first_names <- c("Michael", "Jake", "Allen", "Danielle", "Lindsy")
# Create a vector `math_grades` with 5 hypothetical grades (0 - 100)
# in a math course (that correspond to the 5 names above)
math_grades <- c(98, 82, 65, 78, 92)
# Create a vector `spanish_grades` with 5 hypothetical grades (0 - 100)
# in a Spanish course (that correspond to the 5 names above
spanish_grades <- c(96, 92, 88, 82, 86)
# Create a data.frame variable `students` by combining
# the vectors `first_names`, `math_grades`, and `spanish_grades`
data.frame(first_names, math_grades, spanish_grades)
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
personal_care_1940
# How much money was spent on Food and Tobacco in 1960?
food_tobacco_1960 <- upe["Food and Tobacco", "X1960"]
food_tobacco_1960
# Create a data.frame variable `students` by combining
# the vectors `first_names`, `math_grades`, and `spanish_grades`
students <- data.frame(first_names, math_grades, spanish_grades)
# Create a variable `num_students` that contains the
# number of rows in your dataframe `students`
num_students <- nrow(students)
num_students
View(students)
###################### DataFrame Manipulation (20 POINTS) ######################
install.packages("devtools")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Use the View function to look at the loaded data
View('grants')
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# What was the mean grant value?
mean <- mean(grants$total_amount)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv('data/female_names.csv', stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names(names$year == 2013)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == 2013]
# What was the most popular female name in 2013?
popular_female_name_2013 <- names_2013[names_2013$prop == max(names_2013$prop), 'name']
names_year <- names[names$year == year, ]
most_popular <- names_year[names_year$prop == max(names_year$prop), 'name']
return(most_popular)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes)
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year==1997, ]
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
install.packages("dplyr")
library("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
number_cars <- distinct(vehicles, make)
number_cars
nrow(distinct(vehicles, make))
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year==1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
cars_1997 <- arrange(cars_1997, hwy)
View(vehicles)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average = (hwy+city)/2)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average = (hwy + city) / 2)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997 <- mutate(cars_1997, average = (hwy + cty) / 2)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr, nesting functions)
best_model <- select(
filter(
filter(vehicles, make == 'Acura', year == 2015), hwy == max(hwy)
), model
)
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acuras <- filter(vehicles, make == 'Acura', year == 2015)
best_acura <- filter(acuras, hwy == max(hwy))
best_model <- select(best_acura, model)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr, nesting functions)
best_model <- select(
filter(
filter(vehicles, make == 'Acura', year == 2015), hwy == max(hwy)
), model
)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr and the pipe operator)
best_model <- filter(vehicles, make == 'Acura', year == 2015) %>%
filter(hwy == max(hwy)) %>%
